# -*- coding: utf-8 -*-
"""capstone_bangkit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19yuO6nIIMZLS4UAzHFc149fTCkbCpCnw
"""

import os
import random
import shutil
import cv2
import keras
import numpy as np 
import pandas as pd 
import tensorflow as tf
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
from IPython.display import display
from keras.layers import MaxPool2D
from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers import Adam
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array
from tensorflow.keras.models import Sequential, Model
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, GlobalAveragePooling2D, Dropout, Flatten
from tensorflow.keras.applications import VGG16

train_ds="D:\PROJECT CAPSTONE_ML\dataset\data_train"
test_ds="D:\PROJECT CAPSTONE_ML\dataset\data_test"
validation_ds="D:\PROJECT CAPSTONE_ML\dataset\data_valid"

os.listdir('D:\PROJECT CAPSTONE_ML\dataset\data_train')

batch_size=32
img_size=224

train_datagen = ImageDataGenerator(rescale=1/255.,
                             zoom_range=0.2,
                            width_shift_range=0.2,height_shift_range=0.2
                             )

val_datagen = ImageDataGenerator(rescale=1/255.)

test_datagen = ImageDataGenerator(rescale=1/255.)

train_generator = train_datagen.flow_from_directory(train_ds,  
                                                target_size=(img_size, img_size), 
                                                batch_size=batch_size,
                                                shuffle=True,
                                                class_mode='categorical')  

validation_generator = val_datagen.flow_from_directory(validation_ds,
                                                    target_size=(img_size, img_size),
                                                    batch_size=batch_size,
                                                    shuffle=False,
                                                    class_mode='categorical')

test_generator = test_datagen.flow_from_directory(test_ds,
                                                    target_size=(img_size, img_size),
                                                    batch_size=batch_size,
                                                    shuffle=False,
                                                    class_mode='categorical')

train_generator[0][0].shape

img= train_generator[0]
print(img)

type(train_generator)

img = train_generator[0]
print(img[0].shape)
print(img[1].shape) 

labels = [k for k in train_generator.class_indices]
sample_generate = train_generator.__next__()

images = sample_generate[0]
titles = sample_generate[1]
plt.figure(figsize=(20, 20)) 

for i in range(25):  
    plt.subplot(5, 5, i + 1)
    plt.subplots_adjust(hspace=0.3, wspace=0.3)
    plt.imshow(images[i])
    plt.title(f'Class: {labels[np.argmax(titles[i],axis=0)]}')
    plt.axis("off")

plt.show()

print(len(train_generator))
print(len(test_ds))
print(len(validation_ds))

# Path ke gambar
image_path = "D:\PROJECT CAPSTONE_ML\dataset\data_train\Eksponen\1.png"

# Memuat gambar menggunakan PIL
img = Image.open(image_path)

# Menampilkan gambar menggunakan matplotlib
plt.imshow(img)
plt.axis('off')
plt.show()

img = Image.open(image_path)
img = img.convert("RGB")  # Convert the image to RGB mode

# Convert the image to a NumPy array
img_array = np.array(img)

# Normalize the image array
img_array = img_array / 255.0

plt.imshow(img_array)
plt.axis('off')
plt.show()

model = Sequential()
model.add(Conv2D(input_shape=(224,224,3),filters=64,kernel_size=(3,3),padding="same", activation="relu"))
model.add(Conv2D(filters=64,kernel_size=(3,3),padding="same", activation="relu"))
model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))
model.add(Conv2D(filters=128, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=128, kernel_size=(3,3), padding="same", activation="relu"))
model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))
model.add(Conv2D(filters=256, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=256, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=256, kernel_size=(3,3), padding="same", activation="relu"))
model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))

model.add(Flatten())
model.add(Dense(units=4096,activation="relu"))
model.add(Dense(units=4096,activation="relu"))
model.add(Dense(units=5, activation="softmax"))

# Print the model summary
model.summary()

opt = Adam(learning_rate=0.00001)
model.compile(optimizer=opt, loss=keras.losses.categorical_crossentropy, metrics=['accuracy'])
history =model.fit(train_generator, validation_data=test_generator, epochs=100)

n_categories = len(os.listdir('D:\PROJECT CAPSTONE_ML\dataset\data_valid'))

n_categories

results =pd.DataFrame(history.history)
results.head()

from sklearn.metrics import confusion_matrix
import numpy as np

# Mendapatkan prediksi dari model
y_pred = model.predict(test_generator)
y_pred = np.argmax(y_pred, axis=1)

# Mendapatkan label asli dari generator
y_true = test_generator.classes

# Menghitung matriks konfusi
confusion = confusion_matrix(y_true, y_pred)

# Menampilkan matriks konfusi
print("Confusion Matrix:")
print(confusion)

plt.figure(figsize=(15,6))
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('loss')
plt.xlabel('epochs')
plt.legend(['Train','Val'], loc= 'upper left')
plt.show()

plt.figure(figsize=(15,5))
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['Train', 'Val'], loc='upper left')
plt.show()

y_test_1 = test_generator.classes
y_pred_1 =model.predict(test_generator)
y_pred_1 = np.argmax(y_pred_1,axis=1)

results =model.evaluate(test_generator)

from sklearn.metrics import classification_report

print(classification_report(y_test_1, y_pred_1))

# Evaluasi model pada dataset validasi
val_loss, val_accuracy = model.evaluate(validation_generator)
print("Loss on Validation Set:", val_loss)
print("Accuracy on Validation Set:", val_accuracy)

# Simpan model ke file .h5
model.save('capstone_model.h5')

!dir

model = load_model('D:\PROJECT CAPSTONE_ML\capstone_model.h5')

image_directory = 'D:\PROJECT CAPSTONE_ML\dataset\data_valid'
img_size = 224

images = []
for category in os.listdir(image_directory):
    category_dir = os.path.join(image_directory, category)
    for filename in os.listdir(category_dir):
        if filename.endswith('.txt'):
            continue  # Mengabaikan file ekstensi .txt
        path = os.path.join(category_dir, filename)
        try:
            img = Image.open(path)
            img = img.resize((img_size, img_size))
            images.append(img)
        except (UnidentifiedImageError, OSError):
            continue  # Mengabaikan file yang tidak dapat diidentifikasi atau dibuka

images = np.array([np.array(img) for img in images])
images = images / 255.0

# Menghapus saluran warna tambahan jika ada
images = images[..., :3]

# Melakukan prediksi dan visualisasi seperti sebelumnya
predictions = model.predict(images)

# Tampilkan hasil prediksi untuk setiap gambar
for img_index in range(len(images)):
    class_label_index = np.argmax(predictions[img_index])

    class_labels = {
        0: "Eksponen",
        1: "Integral",
        2: "Logaritma",
        3: "Pertidaksamaan",
        4: "SPLDV"
    }

    class_label = class_labels[class_label_index]

    plt.imshow(images[img_index])
    plt.axis('off')
    plt.title('Predicted class: ' + class_label)
    plt.show()

# Path ke direktori dataset pembahasan
dataset_dir = "D:\PROJECT CAPSTONE_ML\dataset\data_pembahasan"

# Fungsi untuk mengambil gambar pembahasan berdasarkan kategori soal
def get_recommended_images(category, num_images):
    category_dir = os.path.join(dataset_dir, category)
    image_files = os.listdir(category_dir)
    recommended_images = random.sample(image_files, num_images)
    return [os.path.join(category_dir, image_file) for image_file in recommended_images]

# Fungsi untuk menampilkan gambar pembahasan
def display_recommended_images(image_paths):
    for image_path in image_paths:
        image = Image.open(image_path)
        display(image)

# Fungsi untuk melakukan prediksi kategori soal dari gambar masukan
def scan_soal(image):
    # Melakukan pemrosesan gambar untuk melakukan prediksi kategori soal
    # Menggunakan model yang telah dilatih sebelumnya untuk memprediksi kategori soal
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    image = Image.fromarray(image)
    image = image.resize((224, 224))
    image = np.expand_dims(image, axis=0)
    image = image / 255.0

    predictions = model.predict(image)
    predicted_category_index = np.argmax(predictions)

    return predicted_category_index

# Fungsi untuk menampilkan hasil prediksi kategori soal dan rekomendasi gambar pembahasan
def predict_and_recommend(image, num_images):
    print("Soal:")
    display(Image.fromarray(cv2.cvtColor(image, cv2.COLOR_BGR2RGB)))

    predicted_category_index = scan_soal(image)

    category_labels = {
        0: "Eksponen",
        1: "Integral",
        2: "Logaritma",
        3: "Pertidaksamaan",
        4: "SPLDV"
    }
    predicted_category = category_labels[predicted_category_index]

    print("Prediksi Kategori Soal:", predicted_category)

    recommended_images = get_recommended_images(predicted_category, num_images)
    print("Gambar Pembahasan yang Direkomendasikan:")
    display_recommended_images(recommended_images)

# Fungsi untuk mengambil gambar dari kamera
def capture_image():
    # Inisialisasi kamera
    cap = cv2.VideoCapture(0)

    while(True):
        # Baca setiap frame dari kamera
        ret, frame = cap.read()

        # Tampilkan frame
        cv2.imshow('Capture', frame)

        # Tunggu tombol 'q' untuk mengambil gambar
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Hentikan kamera dan tutup jendela
    cap.release()
    cv2.destroyAllWindows()

    return frame

# Contoh penggunaan
num_images = 10

# Ambil gambar dari kamera
image = capture_image()

# Prediksi kategori soal dan tampilkan rekomendasi gambar pembahasan yang sesuai dengan kategori soal
predict_and_recommend(image, num_images)