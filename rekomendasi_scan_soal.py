# -*- coding: utf-8 -*-
"""REKOMENDASI_SCAN_SOAL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VD0NBE6NgbLMFwozInOUiHS7CN1ySuR0
"""

import os
import random
import shutil
import numpy as np
import cv2
from PIL import Image
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from IPython.display import display

result_ds="D:\PROJECT CAPSTONE_ML\dataset\dataset\data_pembahasan"

os.listdir('D:\PROJECT CAPSTONE_ML\dataset\dataset\data_pembahasan')

# Load saved model
model = load_model('D:\PROJECT CAPSTONE_ML\capstone_model.h5')

# Path ke direktori dataset pembahasan
dataset_dir = "D:\PROJECT CAPSTONE_ML\dataset\dataset\data_pembahasan"
# Fungsi untuk mengambil gambar pembahasan berdasarkan kategori soal
def get_recommended_images(category, num_images):
    category_dir = os.path.join(dataset_dir, category)
    image_files = os.listdir(category_dir)
    recommended_images = random.sample(image_files, num_images)
    return [os.path.join(category_dir, image_file) for image_file in recommended_images]

# Fungsi untuk menampilkan gambar pembahasan
def display_recommended_images(image_paths):
    for image_path in image_paths:
        image = Image.open(image_path)
        display(image)

# Fungsi untuk melakukan prediksi kategori soal dari gambar masukan
def scan_soal(image):
    # Melakukan pemrosesan gambar untuk melakukan prediksi kategori soal
    # Gunakan model yang telah dilatih sebelumnya untuk memprediksi kategori
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    image = Image.fromarray(image)
    image = image.resize((224, 224))
    image = np.expand_dims(image, axis=0)
    image = image / 255.0

    predictions = model.predict(image)
    predicted_category_index = np.argmax(predictions)

    # Kembalikan kategori soal yang diprediksi
    return predicted_category_index

# Fungsi untuk menampilkan hasil prediksi kategori soal dan rekomendasi gambar pembahasan
def predict_and_recommend(image, num_images):
    print("Soal:")
    display(Image.fromarray(cv2.cvtColor(image, cv2.COLOR_BGR2RGB)))

    predicted_category_index = scan_soal(image)

    category_labels = {
        0: "Eksponen",
        1: "Integral",
        2: "Logaritma",
        3: "Pertidaksamaan",
        4: "SPLDV"
    }
    predicted_category = category_labels[predicted_category_index]

    print("Prediksi Kategori Soal:", predicted_category)

    recommended_images = get_recommended_images(predicted_category, num_images)
    print("Gambar Pembahasan yang Direkomendasikan:")
    display_recommended_images(recommended_images)

# Fungsi untuk mengambil gambar dari kamera
def capture_image():
    # Inisialisasi kamera
    cap = cv2.VideoCapture(0)

    while(True):
        # Baca setiap frame dari kamera
        ret, frame = cap.read()

        # Tampilkan frame
        cv2.imshow('Capture', frame)

        # Tunggu tombol 'q' untuk mengambil gambar
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    # Hentikan kamera dan tutup jendela
    cap.release()
    cv2.destroyAllWindows()

    return frame

# Contoh penggunaan
num_images = 3

# Ambil gambar dari kamera
image = capture_image()

# Prediksi kategori soal dan tampilkan rekomendasi gambar pembahasan
predict_and_recommend(image, num_images)